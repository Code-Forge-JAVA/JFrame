/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


package my.form;

import javax.swing.JOptionPane;

 import java.util.Vector;
 import file.data.multilines.manager.StaticFileManager;
import javax.swing.DropMode;

/**
 *
 * @author zick
 */
public class JFROM extends javax.swing.JFrame {
    public String getNewUserName;
    int userCount=0;
//    public int sizeUsers = 4;
//    public String names[];
    private  Vector<String> namesArray = new Vector<String>();
    private  Vector<String> userCollectionArray = new Vector<String>();
    private  Vector<String> userIdPassword = new Vector<String> ();
    private  StaticFileManager userfile = new StaticFileManager("userfile.txt");
    private int loopInt = 0;
    
    
    private int indexUser = 0;
    private int indexPinStart = 1;
    private int indexPinEnd = 73;
    private int indexUserID = 73;
    private int indexPasswordStart = 74;
    private int indexPasswordEnd = 84; // Generate plain lenght with nothing and when upload data from file
    private int indexPasswordPushCount = 85;
    private int indexALL = indexPasswordEnd+1;// Generate/Navigate Throw all user data
    
     
    // Stored and separated  data in here;
     Vector <String> pinReceived;
     Vector <String> userID ;
     Vector <String> userPasswords ;
     Vector <String> PasswordPushCount;
             
    
    /**
     * Creates new form JFROM
     */
    public JFROM() {
        initComponents();
//        name = {"Name Named"};
        jButtonNamesOK.setEnabled(false);
//        jPanel1.setFocusable(false);
       jTextFieldNames.requestFocus(true);
       jPanelPin.requestFocusInWindow(); // Focus on on something else then on  texfield
       
       // Collect all
       for (int index =0; index < userfile.getSize();index++) 
       namesArray.add(userfile.getDataFromLineIndex(index, 0));
       jListUserNames.setListData(namesArray);
       // Create array empty of strings for user data after event accures
       
        for (int index = 0; index < indexALL; index++) { // create userCollectionArray
             userCollectionArray.add("");
        }
        
        //Offsets passive
         jTextFieldPinsInput.setText("");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void getConstructedFechedData() {
    
     if (jListUserNames.getSelectedIndex() != -1) {
            pinReceived =  pinReceived = userfile.getLineVectorSpecifiedSize(jListUserNames.getSelectedIndex(), indexPinStart, indexPinEnd); // get whole data from specified line;
            userID = userID =  userfile.getLineVectorSpecifiedSize(jListUserNames.getSelectedIndex(), indexUserID, indexPasswordStart); // get whole data from specified line;  
            userPasswords = userPasswords = userfile.getLineVectorSpecifiedSize(jListUserNames.getSelectedIndex(), indexPasswordStart, indexPasswordEnd); // get whole data from specified line;         
            PasswordPushCount =    PasswordPushCount = userfile.getLineVectorSpecifiedSize(jListUserNames.getSelectedIndex(), indexPasswordEnd, indexPasswordPushCount); // get whole data from specified line;         
       }
    }
   //1.
    private  void setUserCollectionArrayUpdate () {
      
       if (jListUserNames.getSelectedIndex() != -1) {
       String reapetStringforUserPassword = new String(new char[100]).replace("\0", "-");
      
       getConstructedFechedData();
      
       
       
    
           
           System.out.print("\n"+reapetStringforUserPassword+"\n");
           System.out.println("userID:"+userID);
           System.out.println("userPasswords:"+userPasswords);
           System.out.println("PasswordPushCount:"+PasswordPushCount);
           System.out.println("pinReceived:"+pinReceived);
           System.out.print(reapetStringforUserPassword+"\n");
               
          // Remove earler selected user data 
          userCollectionArray.clear();
          //Create new user array map
           for (int index = 0; index < indexALL; index++) { // fill with missing spot with empty string
                userCollectionArray.add("");
            }
          
           //Update array with gathered values/data
           // Pins
           for (int i =0 ; i < pinReceived.size(); i++) { // refill with with legit data
               userCollectionArray.set(i, pinReceived.get(i).toString());
//               System.out.print(" pinReceived: "+i+" = "+userCollectionArray.get(i).toString());
           }
           // User ID
           for (int i =0 ; i < userID.size(); i++) { // refill with with legit data
               
                    userCollectionArray.set( indexUserID -1 + i, userID.get(i).toString());
                    
//               System.out.print(" indexUserID: "+i+" = "+userCollectionArray.get(i).toString());
           }
           
            // User Passwords List from 1-10
           for (int i =0 ; i < userPasswords.size(); i++) { // refill with with legit data
               
                    userCollectionArray.set(indexPasswordStart -1 + i,userPasswords.get(i).toString());
                    
//               System.out.print(" indexPasswordStart: "+i+" = "+userCollectionArray.get(i).toString());
           }
           
            // User PasswordPushCount
           for (int i =0 ; i < PasswordPushCount.size(); i++) { // refill with with legit data
               
                    userCollectionArray.set(indexPasswordEnd -1 + i, PasswordPushCount.get(i).toString());

//                System.out.print(" indexPasswordPushCount: "+i+" = "+userCollectionArray.get(i).toString());
           }
            
            
       }
       
    }
//    2.
     private void updateDataToFile () {
          int index = jListUserNames.getSelectedIndex();
       
       
       if (index > -1) {
        int indexLine = userfile.getDataRowPosition(indexUser, jListUserNames.getSelectedValue(), false); // Get position where user exist in database  
        userfile.setRowCollumn(indexLine, indexPinStart, userCollectionArray);
        userfile.uploadInFile();
           System.out.println("Output push: "+userCollectionArray);
       }
    }
    
    
    private void setDataToTextBoxesPins () {
       int spinnerPin = (int)jSpinnerPinID.getValue() -1; ////fix offset for start working from 0 to 71 
       
       String data;     
          
       // Pins
            data = userCollectionArray.get(spinnerPin);
            jTextFieldPinsInput.setText( data); // read
//            System.out.print(", jSpin pin value: "+spinnerPin+" array:"+data);

            
        
    }
    
    
    private void setDataToTextBoxeIDPassword (boolean  disableJSpinnerPassword) {
//       getFechedData();
       
        String data="";
        
      
         if (!disableJSpinnerPassword) {
             // User ID  
             
             if (!userID.isEmpty()) data = userID.get(0);
                 jTextFieldUserID.setText( data); // read
//                 System.out.print(", User ID +"+ data+"+data");
            
            // user Password Count
              if(!PasswordPushCount.isEmpty())  data = PasswordPushCount.get(0);
               
                if (!PasswordPushCount.isEmpty()) {
                    
                    jLabelpasswordCount.setText("Last time:"+data);
                    jSpinnerUserPassword.setValue(Integer.parseInt(data)); // set saved index is forced to set jPasswordSpinner 
                    
                }else {
                    jSpinnerUserPassword.setValue(1); // if config not exist when set default position 1.
                    jLabelpasswordCount.setText("1");
                }
                
//                System.out.print(", jSpin VALUE--> array:["+data+"]");
             }
         
              // After set a spinner in order.
              //In here do after that.
            int spinnerPassword = (int)jSpinnerUserPassword.getValue() -1; ////fix offset for start working from 0 to 71 
        // user Password
         
         if(!userPasswords.isEmpty()) data = userPasswords.get(spinnerPassword);
            jTextFieldUserPassword.setText( data); // read
            
//            System.out.print(", jSpin SET VALUE: "+spinnerPassword+" array:["+data+"]");
            
        
                
        
    }
    
     private void getDataFromTextBoxeIDPassword () {
       int spinnerPassword = (int)jSpinnerUserPassword.getValue() -1; ////fix offset for start working from 0 to 71 
        String data;
        
        // User ID
            data =  jTextFieldUserID.getText();;
            // read
            userCollectionArray.set(indexUserID-1, data);
//            System.out.print(", User ID +"+ data+"+data");
            
            
        // user Password
            data = jTextFieldUserPassword.getText();
             // read
            userCollectionArray.set( indexPasswordStart-1+spinnerPassword ,data );
//            System.out.print(", jSpin pin value: "+spinnerPassword+" array:"+data);
            
        // user Password Count
             
              userCollectionArray.set((indexPasswordPushCount-2),String.valueOf( spinnerPassword + 1)  );
              
              jLabelpasswordCount.setText("New:"+(spinnerPassword+1) );
              
             
                     
        
    }
    
    private void jSpinnerPASSWORD_ToTextBox () {
      int value = (int)jSpinnerUserPassword.getValue() -1; ////fix offset for start working from 0 to 71 
            String data = userCollectionArray.get(value);
            jTextFieldUserID.setText( data); // read
//            System.out.print("jSpin ID Password value: "+value+" array:"+data);
    }
    
   
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jPanelPin = new javax.swing.JPanel();
        jLabelUserSelected = new javax.swing.JLabel();
        jButtonRemoveUser = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelPinDisplay = new javax.swing.JLabel();
        jTextFieldPinsInput = new javax.swing.JTextField();
        jButtonPinsInput = new javax.swing.JButton();
        jButtonDeleteUser = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListUserNames = new javax.swing.JList<>();
        jButtonUpdate = new javax.swing.JButton();
        jSpinnerPinID = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldUserID = new javax.swing.JTextField();
        jTextFieldUserPassword = new javax.swing.JTextField();
        jLabelPinDisplay2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSpinnerUserPassword = new javax.swing.JSpinner();
        jLabelpasswordCount = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jPanel1 = new javax.swing.JPanel();
        jTextFieldNames = new javax.swing.JTextField();
        jButtonNamesOK = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        jMenu1.setText("jMenu1");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setResizable(false);

        jPanelPin.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelPin.setForeground(new java.awt.Color(255, 255, 255));
        jPanelPin.setToolTipText("");
        jPanelPin.setAutoscrolls(true);
        jPanelPin.setFont(new java.awt.Font("Segoe UI Symbol", 0, 11)); // NOI18N
        jPanelPin.setMaximumSize(new java.awt.Dimension(500, 500));
        jPanelPin.setMinimumSize(new java.awt.Dimension(3200, 3200));
        jPanelPin.setOpaque(true);

        jLabelUserSelected.setFont(new java.awt.Font("Vijaya", 0, 24)); // NOI18N
        jLabelUserSelected.setText("none");
        jLabelUserSelected.setName(""); // NOI18N

        jButtonRemoveUser.setText("Panaikinti");
        jButtonRemoveUser.setToolTipText("");
        jButtonRemoveUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveUserActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelPinDisplay.setFont(new java.awt.Font("Vani", 1, 18)); // NOI18N
        jLabelPinDisplay.setText("Pins");

        jTextFieldPinsInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPinsInputActionPerformed(evt);
            }
        });

        jButtonPinsInput.setText("Enter Pin");
        jButtonPinsInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPinsInputActionPerformed(evt);
            }
        });

        jButtonDeleteUser.setFont(new java.awt.Font("Meiryo UI", 1, 12)); // NOI18N
        jButtonDeleteUser.setText("Remove");
        jButtonDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteUserActionPerformed(evt);
            }
        });

        jListUserNames.setName("Lukes"); // NOI18N
        jListUserNames.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jListUserNamesMouseReleased(evt);
            }
        });
        jListUserNames.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListUserNamesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jListUserNames);
        jListUserNames.getAccessibleContext().setAccessibleName("Lukes");

        jButtonUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonUpdate.setText("Update ");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jSpinnerPinID.setModel(new javax.swing.SpinnerNumberModel(1, 1, 72, 1));
        jSpinnerPinID.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerPinIDStateChanged(evt);
            }
        });

        jLabel1.setText("Password");

        jLabel2.setText("ID");

        jLabelPinDisplay2.setFont(new java.awt.Font("Vani", 1, 18)); // NOI18N
        jLabelPinDisplay2.setText("Log In");

        jLabel3.setFont(new java.awt.Font("Vrinda", 1, 19)); // NOI18N
        jLabel3.setText("User:");

        jSpinnerUserPassword.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        jSpinnerUserPassword.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerUserPasswordStateChanged(evt);
            }
        });

        jLabelpasswordCount.setText("---");

        javax.swing.GroupLayout jPanelPinLayout = new javax.swing.GroupLayout(jPanelPin);
        jPanelPin.setLayout(jPanelPinLayout);
        jPanelPinLayout.setHorizontalGroup(
            jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPinLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPinLayout.createSequentialGroup()
                        .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelPinLayout.createSequentialGroup()
                                .addGap(625, 625, 625)
                                .addComponent(jButtonRemoveUser))
                            .addGroup(jPanelPinLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelUserSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelPinLayout.createSequentialGroup()
                                .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButtonUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelPinLayout.createSequentialGroup()
                                        .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButtonPinsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanelPinLayout.createSequentialGroup()
                                                .addComponent(jTextFieldPinsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSpinnerPinID, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabelPinDisplay))
                                        .addGap(35, 35, 35)
                                        .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanelPinLayout.createSequentialGroup()
                                                .addComponent(jTextFieldUserPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSpinnerUserPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jTextFieldUserID)
                                            .addComponent(jLabelPinDisplay2))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelpasswordCount, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelPinLayout.createSequentialGroup()
                        .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelPinLayout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelPinLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonDeleteUser, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelPinLayout.setVerticalGroup(
            jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPinLayout.createSequentialGroup()
                .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPinLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jButtonRemoveUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelPinLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jButtonDeleteUser, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                        .addGap(41, 41, 41)
                        .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelUserSelected)
                            .addComponent(jLabel3))
                        .addGap(14, 14, 14)
                        .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPinDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPinDisplay2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldPinsInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerPinID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonPinsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldUserPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerUserPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabelpasswordCount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonUpdate)
                        .addGap(293, 293, 293)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setAutoscrolls(true);

        jTextFieldNames.setFont(new java.awt.Font("Arabic Typesetting", 0, 22)); // NOI18N
        jTextFieldNames.setText("Add New User");
        jTextFieldNames.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(204, 204, 255)));
        jTextFieldNames.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jTextFieldNamesComponentAdded(evt);
            }
        });
        jTextFieldNames.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldNamesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldNamesFocusLost(evt);
            }
        });
        jTextFieldNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNamesActionPerformed(evt);
            }
        });

        jButtonNamesOK.setText("Ok");
        jButtonNamesOK.setDefaultCapable(false);
        jButtonNamesOK.setPreferredSize(new java.awt.Dimension(47, 26));
        jButtonNamesOK.setRequestFocusEnabled(false);
        jButtonNamesOK.setVerifyInputWhenFocusTarget(false);
        jButtonNamesOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNamesOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldNames, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonNamesOK, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNamesOK, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanelPin, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelPin, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNamesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNamesActionPerformed

    private void jTextFieldNamesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNamesFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNamesFocusLost

    private void jTextFieldNamesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNamesFocusGained
        // TODO add your handling code here:
        jTextFieldNames.setText(""); // Errise Text
        jButtonNamesOK.setText("Ok");
        jButtonNamesOK.setEnabled(true); // set ok button pressable
    }//GEN-LAST:event_jTextFieldNamesFocusGained

    private void jTextFieldNamesComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jTextFieldNamesComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNamesComponentAdded

    private void jButtonNamesOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNamesOKActionPerformed
        jButtonNamesOK.setEnabled(false); // diactivating ok Button
        jPanelPin.requestFocus(true); // focus somethere else then textField
        getNewUserName = jTextFieldNames.getText();

        if (jTextFieldNames.getText().isEmpty())
        jButtonNamesOK.setText("Ok"); // Set Only ok if nothing are imputed in textfield from a user
        //        else
        //        jButtonNamesOK.setText("Pridetas: " + getNewUserName);

        if (!jTextFieldNames.getText().isEmpty())  {  // Where user are commited

            if (!userfile.isSeparator(getNewUserName) && userfile.setRowAppend(0, 1, false, getNewUserName)  ) // Return condition if successfull data commited
            {
                //Data Updates
                jButtonNamesOK.setText("Added: " + getNewUserName);
                // Visualy update
                namesArray.add(jTextFieldNames.getText());
                jListUserNames.setListData(namesArray);
                
                jButtonDeleteUser.setEnabled(false);
                
            }
            else if (userfile.isSeparator(getNewUserName))
                 jButtonNamesOK.setText("Ilegal symbol[~] ");
            else    
                 jButtonNamesOK.setText("Alredy exist: " + getNewUserName);
            

            userfile.displayDataMap();
            System.out.println("CompCount: "+userCount);
            userCount++;
            userfile.uploadInFile();
        }

        // Vartotojas fix if jList is nothing are selected
        if (jListUserNames.getSelectedIndex() == -1 )
        jLabelUserSelected.setText("none");

        ///End Of Cycle
        jTextFieldNames.setText("Add New User");
        jTextFieldNames.setEditable(true);
        jTextFieldNames.getText();
        
    }//GEN-LAST:event_jButtonNamesOKActionPerformed

    private void jListUserNamesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListUserNamesKeyReleased
        if (jListUserNames.getSelectedIndex() != -1){ // if list is not emtpy
            jLabelUserSelected.setText(jListUserNames.getSelectedValue());
            jButtonDeleteUser.setEnabled(true); // Disable remove users button
            jTextFieldPinsInput.setText("");// wipe pin inputBox 
        }
        
           
            
        setUserCollectionArrayUpdate ();   
        setDataToTextBoxesPins ();
        setDataToTextBoxeIDPassword (false);
        
    }//GEN-LAST:event_jListUserNamesKeyReleased

    private void jListUserNamesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListUserNamesMouseReleased
        if (jListUserNames.getSelectedIndex() != -1){ // if list is not emtpy
            jLabelUserSelected.setText(jListUserNames.getSelectedValue());
            jButtonDeleteUser.setEnabled(true); // Disable remove users button
            jTextFieldPinsInput.setText("");// wipe pin inputBox 

        }
        
           setUserCollectionArrayUpdate ();
           setDataToTextBoxesPins ();
           setDataToTextBoxeIDPassword (false);
             
    }//GEN-LAST:event_jListUserNamesMouseReleased

    private void jButtonDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteUserActionPerformed
        String output;
        output = "Welcome to South Corea";
        
       
           //do something
           
        String selectedName = jListUserNames.getSelectedValue();
        int selectedIndex = jListUserNames.getSelectedIndex();
        
        int userCondition =  JOptionPane.showConfirmDialog(null,"Do you want remove "+selectedName,"Winter quiz",JOptionPane.YES_NO_OPTION);
       

        if (selectedIndex > -1 && userCondition == 0) { // user return posetive

            namesArray.remove(selectedIndex);
            jListUserNames.setListData(namesArray);

            userfile.setRowRemove(0, 1, true, selectedName);
            userfile.uploadInFile();
            jLabelUserSelected.setText(""); // remove user label that was selected
            jButtonDeleteUser.setEnabled(false);
        }

     
    }//GEN-LAST:event_jButtonDeleteUserActionPerformed

    private void jButtonRemoveUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveUserActionPerformed
        String textSelected  = jListUserNames.getSelectedValue();
        int indexSelected = jListUserNames.getSelectedIndex();

        // Remove unvanted
        if (indexSelected > -1) {

            namesArray.remove(indexSelected);
            jListUserNames.setListData(namesArray);

            // Remove and update file data
            userfile.setRowRemove(0, 1, false, textSelected);
            userfile.uploadInFile();

        }

        if (jListUserNames.getSelectedIndex() == -1){
            jLabelUserSelected.setText("---"); // clear selected text
            jButtonRemoveUser.setEnabled(false); // Disable remove users button
        }
    }//GEN-LAST:event_jButtonRemoveUserActionPerformed

    private void jButtonPinsInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPinsInputActionPerformed
            
         int value = (int)jSpinnerPinID.getValue()-1; ////fix offset for start working from 0 to 71 
            String data = jTextFieldPinsInput.getText();
            userCollectionArray.set(value, data); //set new data in arrayBuffer
            System.out.print("\nIvesti index: "+value+", data:"+data);
            
    }//GEN-LAST:event_jButtonPinsInputActionPerformed

    private void jSpinnerPinIDStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerPinIDStateChanged
//            setUserCollectionArrayUpdate ();
           setDataToTextBoxesPins ();
 
      
    }//GEN-LAST:event_jSpinnerPinIDStateChanged

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
          getDataFromTextBoxeIDPassword(); 
          updateDataToFile();
        
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jTextFieldPinsInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPinsInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPinsInputActionPerformed

    private void jSpinnerUserPasswordStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerUserPasswordStateChanged
        getConstructedFechedData();
        setDataToTextBoxeIDPassword (true);
    }//GEN-LAST:event_jSpinnerUserPasswordStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFROM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFROM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFROM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFROM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFROM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButtonDeleteUser;
    private javax.swing.JButton jButtonNamesOK;
    private javax.swing.JButton jButtonPinsInput;
    private javax.swing.JButton jButtonRemoveUser;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelPinDisplay;
    private javax.swing.JLabel jLabelPinDisplay2;
    private javax.swing.JLabel jLabelUserSelected;
    private javax.swing.JLabel jLabelpasswordCount;
    private javax.swing.JList<String> jListUserNames;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelPin;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerPinID;
    private javax.swing.JSpinner jSpinnerUserPassword;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldNames;
    private javax.swing.JTextField jTextFieldPinsInput;
    private javax.swing.JTextField jTextFieldUserID;
    private javax.swing.JTextField jTextFieldUserPassword;
    // End of variables declaration//GEN-END:variables
}
